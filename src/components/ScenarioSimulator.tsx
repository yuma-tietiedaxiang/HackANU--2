import React, { useState } from "react";
import { motion } from "motion/react";
import { Button } from "./ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { Label } from "./ui/label";
import { Badge } from "./ui/badge";
import {
  ArrowLeft,
  Target,
  TrendingUp,
  AlertTriangle,
  CheckCircle,
  Clock,
  Sparkles,
  Download,
  FileText,
  Lightbulb,
  Shield,
  ChevronRight,
} from "lucide-react";

interface ScenarioSimulatorProps {
  onBack: () => void;
}

interface ScenarioInputs {
  startupName: string;
  actionTest: string;
  context: string;
  targetAudience: string;
}

interface GeneratedScenario {
  summary: string;
  positiveOutcomes: string[];
  potentialRisks: string[];
  recommendations: string[];
}

export function ScenarioSimulator({ onBack }: ScenarioSimulatorProps) {
  const [inputs, setInputs] = useState({
    startupName: "",
    actionTest: "",
    context: "",
    targetAudience: "",
  });
  const [generatedScenario, setGeneratedScenario] = useState(null as any);
  const [isGenerating, setIsGenerating] = useState(false);
  const [errorMsg, setErrorMsg] = useState(null as any);

  const handleInputChange = (field: keyof ScenarioInputs, value: string) => {
    setInputs((prev) => ({ ...prev, [field]: value }));
  };

  const handleGenerateScenario = async () => {
    if (
      !inputs.startupName ||
      !inputs.actionTest ||
      !inputs.context ||
      !inputs.targetAudience
    ) {
      return;
    }

    setIsGenerating(true);
    setErrorMsg(null);
    setGeneratedScenario(null);

    try {
      const apiBase = (import.meta as any).env?.VITE_API_BASE || "";
      const resp = await fetch(`${apiBase}/api/simulate`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          startupName: inputs.startupName,
          actionTest: inputs.actionTest,
          context: inputs.context,
          targetAudience: inputs.targetAudience,
        }),
      });

      const data = await resp.json();
      if (!resp.ok || !data.ok) {
        throw new Error(data.error || "Simulation failed");
      }

      const scenario: GeneratedScenario = {
        summary: data.executive_summary || "",
        positiveOutcomes: Array.isArray(data.positive_outcomes)
          ? data.positive_outcomes
          : [],
        potentialRisks: Array.isArray(data.potential_risks)
          ? data.potential_risks
          : [],
        recommendations: Array.isArray(data.recommendations)
          ? data.recommendations
          : [],
      };

      setGeneratedScenario(scenario);
    } catch (err: any) {
      setErrorMsg(err?.message || "Unexpected error");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadPDF = () => {
    // In a real implementation, this would generate and download a PDF
    const content = `
SCENARIO ANALYSIS REPORT
Generated by Co-founder AI

Startup: ${inputs.startupName}
Action/Test: ${inputs.actionTest}
Context: ${inputs.context}
Target Audience: ${inputs.targetAudience}

EXECUTIVE SUMMARY
${generatedScenario?.summary}

POSITIVE OUTCOMES
${generatedScenario?.positiveOutcomes
  .map((outcome, i) => `${i + 1}. ${outcome}`)
  .join("\n")}

POTENTIAL RISKS
${generatedScenario?.potentialRisks
  .map((risk, i) => `${i + 1}. ${risk}`)
  .join("\n")}

RECOMMENDATIONS
${generatedScenario?.recommendations
  .map((rec, i) => `${i + 1}. ${rec}`)
  .join("\n")}

Generated on: ${new Date().toLocaleDateString()}
    `;

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${inputs.startupName.replace(
      /\s+/g,
      "_"
    )}_scenario_analysis.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const isFormValid =
    inputs.startupName &&
    inputs.actionTest &&
    inputs.context &&
    inputs.targetAudience;

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-black via-gray-900 to-black opacity-90" />

      <div className="relative z-10 container mx-auto px-6 py-8">
        {/* Header */}
        <motion.header
          className="flex items-center justify-between mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={onBack}
              className="text-gray-400 hover:text-white hover:bg-gray-800"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Home
            </Button>

            <div className="h-6 w-px bg-gray-700" />

            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                <Target className="w-5 h-5 text-white" />
              </div>
              <h1 className="text-2xl">Scenario Simulator</h1>
            </div>
          </div>

          <Badge
            variant="outline"
            className="border-orange-500 text-orange-400"
          >
            <Sparkles className="w-3 h-3 mr-1" />
            AI-Powered Predictions
          </Badge>
        </motion.header>

        {/* Main Content */}
        {isGenerating ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="text-center space-y-6 max-w-2xl mx-auto"
          >
            <div className="w-20 h-20 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
              >
                <Sparkles className="w-10 h-10 text-white" />
              </motion.div>
            </div>

            <div className="space-y-2">
              <h2 className="text-2xl">Generating Your Scenario Analysis</h2>
              <p className="text-gray-400">
                Our AI is analyzing your inputs and creating comprehensive
                insights...
              </p>
            </div>

            <div className="space-y-3">
              {[
                "Processing startup context and target audience...",
                "Analyzing market conditions and competitive landscape...",
                "Evaluating potential outcomes and risk factors...",
                "Generating strategic recommendations...",
              ].map((step, index) => (
                <motion.div
                  key={step}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.7, duration: 0.5 }}
                  className="flex items-center space-x-3 text-sm text-gray-300"
                >
                  <Clock className="w-4 h-4" />
                  <span>{step}</span>
                </motion.div>
              ))}
            </div>
          </motion.div>
        ) : !generatedScenario ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            {/* Introduction */}
            <Card className="bg-gray-900/50 border-gray-800 mb-8">
              <CardContent className="p-8 text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Target className="w-8 h-8 text-white" />
                </div>
                <h2 className="text-2xl mb-3">AI-Powered Scenario Generator</h2>
                <p className="text-gray-400 max-w-2xl mx-auto">
                  Create custom business scenario analysis by providing your
                  startup details and strategic context. Our AI will generate
                  comprehensive insights, outcomes, and recommendations.
                </p>
                {errorMsg ? (
                  <p className="text-red-400 mt-4">{errorMsg}</p>
                ) : null}
              </CardContent>
            </Card>

            {/* Input Form */}
            <Card className="bg-gray-900/50 border-gray-800">
              <CardHeader>
                <CardTitle className="text-white flex items-center space-x-2">
                  <FileText className="w-5 h-5" />
                  <span>Scenario Details</span>
                </CardTitle>
                <p className="text-gray-400">
                  Fill in all fields to generate your custom scenario analysis
                </p>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="startup-name" className="text-white">
                      Startup Name
                    </Label>
                    <Input
                      id="startup-name"
                      placeholder="e.g., TechFlow Solutions"
                      value={inputs.startupName}
                      onChange={(e) =>
                        handleInputChange("startupName", e.target.value)
                      }
                      className="bg-gray-800/50 border-gray-700 text-white placeholder-gray-400"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="target-audience" className="text-white">
                      Target Audience
                    </Label>
                    <Input
                      id="target-audience"
                      placeholder="e.g., SME businesses in healthcare"
                      value={inputs.targetAudience}
                      onChange={(e) =>
                        handleInputChange("targetAudience", e.target.value)
                      }
                      className="bg-gray-800/50 border-gray-700 text-white placeholder-gray-400"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="action-test" className="text-white">
                    Action/Test to Analyze
                  </Label>
                  <Input
                    id="action-test"
                    placeholder="e.g., Launch freemium pricing model, Enter European market, Partner with enterprise vendors"
                    value={inputs.actionTest}
                    onChange={(e) =>
                      handleInputChange("actionTest", e.target.value)
                    }
                    className="bg-gray-800/50 border-gray-700 text-white placeholder-gray-400"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="context" className="text-white">
                    Business Context & Current Situation
                  </Label>
                  <Textarea
                    id="context"
                    placeholder="Describe your current business situation, market conditions, resources, and any relevant background information..."
                    value={inputs.context}
                    onChange={(e) =>
                      handleInputChange("context", e.target.value)
                    }
                    className="bg-gray-800/50 border-gray-700 text-white placeholder-gray-400 min-h-[100px]"
                  />
                </div>

                <div className="flex justify-center pt-4">
                  <Button
                    onClick={handleGenerateScenario}
                    disabled={!isFormValid || isGenerating}
                    className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white px-8 py-3 text-lg disabled:opacity-50"
                  >
                    {isGenerating ? (
                      <>
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{
                            duration: 1,
                            repeat: Infinity,
                            ease: "linear",
                          }}
                          className="mr-2"
                        >
                          <Sparkles className="w-5 h-5" />
                        </motion.div>
                        Generating...
                      </>
                    ) : (
                      <>
                        <Target className="w-5 h-5 mr-2" />
                        Generate Scenario
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="space-y-6"
          >
            {/* Results Header */}
            <Card className="bg-gray-900/50 border-gray-800">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                      <CheckCircle className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h2 className="text-xl text-white">
                        Scenario Analysis Complete
                      </h2>
                      <p className="text-gray-400">
                        Analysis for {inputs.startupName} - {inputs.actionTest}
                      </p>
                    </div>
                  </div>
                  <div className="flex space-x-3">
                    <Button
                      onClick={handleDownloadPDF}
                      className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Download PDF
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        setGeneratedScenario(null);
                        setInputs({
                          startupName: "",
                          actionTest: "",
                          context: "",
                          targetAudience: "",
                        });
                      }}
                      className="border-gray-600 text-gray-300"
                    >
                      New Scenario
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Scenario Summary */}
            <Card className="bg-gray-900/50 border-gray-800">
              <CardHeader>
                <CardTitle className="text-white flex items-center space-x-2">
                  <FileText className="w-5 h-5" />
                  <span>Executive Summary</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-300 leading-relaxed">
                  {generatedScenario.summary}
                </p>
              </CardContent>
            </Card>

            {/* Analysis Grid */}
            <div className="grid lg:grid-cols-3 gap-6">
              {/* Positive Outcomes */}
              <Card className="bg-gray-900/50 border-gray-800">
                <CardHeader>
                  <CardTitle className="text-white flex items-center space-x-2">
                    <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center">
                      <TrendingUp className="w-4 h-4 text-white" />
                    </div>
                    <span>Positive Outcomes</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {generatedScenario.positiveOutcomes.map(
                      (outcome, index) => (
                        <motion.div
                          key={index}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1, duration: 0.5 }}
                          className="flex items-start space-x-3"
                        >
                          <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                          <p className="text-gray-300 text-sm leading-relaxed">
                            {outcome}
                          </p>
                        </motion.div>
                      )
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Potential Risks */}
              <Card className="bg-gray-900/50 border-gray-800">
                <CardHeader>
                  <CardTitle className="text-white flex items-center space-x-2">
                    <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                      <AlertTriangle className="w-4 h-4 text-white" />
                    </div>
                    <span>Potential Risks</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {generatedScenario.potentialRisks.map((risk, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1, duration: 0.5 }}
                        className="flex items-start space-x-3"
                      >
                        <div className="w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0" />
                        <p className="text-gray-300 text-sm leading-relaxed">
                          {risk}
                        </p>
                      </motion.div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Recommendations */}
              <Card className="bg-gray-900/50 border-gray-800">
                <CardHeader>
                  <CardTitle className="text-white flex items-center space-x-2">
                    <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center">
                      <Lightbulb className="w-4 h-4 text-white" />
                    </div>
                    <span>Recommendations</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {generatedScenario.recommendations.map(
                      (recommendation, index) => (
                        <motion.div
                          key={index}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1, duration: 0.5 }}
                          className="flex items-start space-x-3"
                        >
                          <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                          <p className="text-gray-300 text-sm leading-relaxed">
                            {recommendation}
                          </p>
                        </motion.div>
                      )
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Action Steps */}
            <Card className="bg-gray-900/50 border-gray-800">
              <CardHeader>
                <CardTitle className="text-white flex items-center space-x-2">
                  <Shield className="w-5 h-5" />
                  <span>Next Steps</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="p-4 bg-gray-800/30 rounded-lg border border-gray-700">
                    <h4 className="text-white mb-2 flex items-center space-x-2">
                      <ChevronRight className="w-4 h-4" />
                      <span>Immediate Actions</span>
                    </h4>
                    <p className="text-gray-400 text-sm">
                      Start with pilot testing and stakeholder alignment before
                      full implementation.
                    </p>
                  </div>
                  <div className="p-4 bg-gray-800/30 rounded-lg border border-gray-700">
                    <h4 className="text-white mb-2 flex items-center space-x-2">
                      <ChevronRight className="w-4 h-4" />
                      <span>Monitor & Adjust</span>
                    </h4>
                    <p className="text-gray-400 text-sm">
                      Set up tracking systems and be prepared to pivot based on
                      real-world feedback.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  );
}
